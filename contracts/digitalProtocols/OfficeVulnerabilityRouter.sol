// SPDX-License-Identifier: CyberSanctum
pragma solidity ^0.8.19;

contract OfficeVulnerabilityRouter {
    address public steward;

    struct Vulnerability {
        string cveID;
        string severity;
        string vector;
        string affectedVersion;
        uint256 disclosureDate;
        bool patched;
    }

    Vulnerability[] public vulnerabilities;

    event VulnerabilityLogged(string cveID, string severity, string vector, uint256 disclosureDate);
    event PatchStatusUpdated(uint256 index, bool patched);

    constructor() {
        steward = msg.sender;
    }

    function logVulnerability(
        string memory cveID,
        string memory severity,
        string memory vector,
        string memory affectedVersion,
        uint256 disclosureDate
    ) public {
        vulnerabilities.push(Vulnerability(cveID, severity, vector, affectedVersion, disclosureDate, false));
        emit VulnerabilityLogged(cveID, severity, vector, disclosureDate);
    }

    function updatePatchStatus(uint256 index, bool status) public {
        require(index < vulnerabilities.length, "Invalid index");
        vulnerabilities[index].patched = status;
        emit PatchStatusUpdated(index, status);
    }

    function getVulnerability(uint256 index) public view returns (
        string memory, string memory, string memory, string memory, uint256, bool
    ) {
        Vulnerability memory v = vulnerabilities[index];
        return (v.cveID, v.severity, v.vector, v.affectedVersion, v.disclosureDate, v.patched);
    }

    function totalVulnerabilities() public view returns (uint256) {
        return vulnerabilities.length;
    }
}
