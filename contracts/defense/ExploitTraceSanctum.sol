// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ExploitTraceSanctum {
    enum Severity { Low, Medium, High, Critical }

    struct ExploitTrace {
        uint256 traceId;
        string originIP;
        string payloadType;
        string targetSystem;
        Severity severity;
        string consequence;
        uint256 timestamp;
        bool mitigated;
    }

    mapping(uint256 => ExploitTrace) public traceLog;
    uint256 public traceCount;

    event ExploitLogged(uint256 traceId, string originIP, Severity severity);
    event ExploitMitigated(uint256 traceId);

    function logExploit(
        string memory originIP,
        string memory payloadType,
        string memory targetSystem,
        Severity severity,
        string memory consequence,
        uint256 timestamp
    ) public {
        traceLog[traceCount] = ExploitTrace(
            traceCount,
            originIP,
            payloadType,
            targetSystem,
            severity,
            consequence,
            timestamp,
            false
        );
        emit ExploitLogged(traceCount, originIP, severity);
        traceCount++;
    }

    function mitigateExploit(uint256 traceId) public {
        require(traceId < traceCount, "Invalid trace ID");
        traceLog[traceId].mitigated = true;
        emit ExploitMitigated(traceId);
    }

    function getTrace(uint256 traceId) public view returns (ExploitTrace memory) {
        return traceLog[traceId];
    }
}
