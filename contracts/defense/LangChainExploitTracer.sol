// SPDX-License-Identifier: LangChainSanctum
pragma solidity ^0.8.19;

contract LangChainExploitTracer {
    struct ExploitSignal {
        string exploitID;
        string modelUsed;
        string promptHash;
        bool traced;
        string stewardNote;
    }

    mapping(string => ExploitSignal) public exploitRegistry;

    event ExploitTagged(string exploitID, string modelUsed);
    event ExploitTraced(string exploitID);

    function tagExploit(string memory exploitID, string memory modelUsed, string memory promptHash, string memory stewardNote) public {
        exploitRegistry[exploitID] = ExploitSignal(exploitID, modelUsed, promptHash, false, stewardNote);
        emit ExploitTagged(exploitID, modelUsed);
    }

    function traceExploit(string memory exploitID) public {
        require(bytes(exploitRegistry[exploitID].modelUsed).length > 0, "Exploit not tagged");
        exploitRegistry[exploitID].traced = true;
        emit ExploitTraced(exploitID);
    }

    function getExploitStatus(string memory exploitID) public view returns (ExploitSignal memory) {
        return exploitRegistry[exploitID];
    }
}
