// SPDX-License-Identifier: MIT
pragma solidity ^0.8.21;

/// @title NetworkVulnerabilityMitigationProtocol
/// @notice Registry for infrastructure CVEs, breach severity, patch status, and mitigation tracking
/// @dev Anchors civic audit events and emotional consequence tagging for network sanctums

contract NetworkVulnerabilityMitigationProtocol {
    address public steward;
    mapping(address => bool) public auditors;

    modifier onlySteward() {
        require(msg.sender == steward, "Not steward");
        _;
    }

    modifier onlyAuditor() {
        require(auditors[msg.sender] || msg.sender == steward, "Not auditor");
        _;
    }

    enum Severity {
        Low,
        Moderate,
        High,
        Critical
    }

    enum PatchStatus {
        Unpatched,
        Mitigated,
        Patched,
        Verified
    }

    struct Device {
        string name;
        string model;
        string jurisdiction;
        bool active;
        uint256 registeredAt;
    }

    struct CVE {
        uint256 id;
        address device;
        string cveCode;
        Severity severity;
        PatchStatus status;
        string mitigation;
        string emotionalTag;
        uint256 createdAt;
        uint256 updatedAt;
    }

    uint256 public nextCveId = 1;
    mapping(address => Device) public deviceRegistry;
    mapping(uint256 => CVE) public cveRegistry;
    mapping(address => uint256[]) public deviceCveIds;

    event AuditorSet(address indexed account, bool status);
    event DeviceRegistered(address indexed device, string name, string model);
    event CVEFiled(uint256 indexed id, address indexed device, string cveCode, Severity severity);
    event PatchStatusUpdated(uint256 indexed id, PatchStatus status, string emotionalTag);
    event MitigationBroadcasted(uint256 indexed id, string mitigation);

    constructor() {
        steward = msg.sender;
        auditors[msg.sender] = true;
        emit AuditorSet(msg.sender, true);
    }

    function setAuditor(address account, bool status) external onlySteward {
        auditors[account] = status;
        emit AuditorSet(account, status);
    }

    function registerDevice(address deviceAddr, string calldata name, string calldata model, string calldata jurisdiction) external onlyAuditor {
        require(!deviceRegistry[deviceAddr].active, "Already registered");
        deviceRegistry[deviceAddr] = Device({
            name: name,
            model: model,
            jurisdiction: jurisdiction,
            active: true,
            registeredAt: block.timestamp
        });
        emit DeviceRegistered(deviceAddr, name, model);
    }

    function fileCVE(
        address deviceAddr,
        string calldata cveCode,
        Severity severity,
        string calldata mitigation,
        string calldata emotionalTag
    ) external onlyAuditor returns (uint256 id) {
        require(deviceRegistry[deviceAddr].active, "Device not registered");
        id = nextCveId++;
        cveRegistry[id] = CVE({
            id: id,
            device: deviceAddr,
            cveCode: cveCode,
            severity: severity,
            status: PatchStatus.Unpatched,
            mitigation: mitigation,
            emotionalTag: emotionalTag,
            createdAt: block.timestamp,
            updatedAt: block.timestamp
        });
        deviceCveIds[deviceAddr].push(id);
        emit CVEFiled(id, deviceAddr, cveCode, severity);
        emit MitigationBroadcasted(id, mitigation);
    }

    function updatePatchStatus(uint256 id, PatchStatus status, string calldata emotionalTag) external onlyAuditor {
        CVE storage cve = cveRegistry[id];
        require(cve.id != 0, "CVE not found");
        cve.status = status;
        cve.emotionalTag = emotionalTag;
        cve.updatedAt = block.timestamp;
        emit PatchStatusUpdated(id, status, emotionalTag);
    }

    function getDevice(address deviceAddr) external view returns (Device memory) {
        return deviceRegistry[deviceAddr];
    }

    function getCVE(uint256 id) external view returns (CVE memory) {
        return cveRegistry[id];
    }

    function listDeviceCVEs(address deviceAddr) external view returns (uint256[] memory) {
        return deviceCveIds[deviceAddr];
    }
}
