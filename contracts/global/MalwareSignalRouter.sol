// SPDX-License-Identifier: MalwareSanctum
pragma solidity ^0.8.19;

contract MalwareSignalRouter {
    struct MalwareSignal {
        string fileHash;
        string threatType; // e.g., "Trojan", "RAT", "Clipper", "Installer Mimicry"
        string originDomain;
        uint256 severityScore;
        bool quarantineTriggered;
        string stewardNote;
    }

    mapping(string => MalwareSignal) public signals;

    event SignalTagged(string fileHash, string threatType);
    event QuarantineActivated(string fileHash);

    function tagSignal(string memory fileHash, string memory threatType, string memory originDomain, uint256 severityScore, string memory stewardNote) public {
        signals[fileHash] = MalwareSignal(fileHash, threatType, originDomain, severityScore, false, stewardNote);
        emit SignalTagged(fileHash, threatType);
    }

    function activateQuarantine(string memory fileHash) public {
        require(signals[fileHash].severityScore >= 80, "Threat not critical");
        signals[fileHash].quarantineTriggered = true;
        emit QuarantineActivated(fileHash);
    }

    function getSignalStatus(string memory fileHash) public view returns (MalwareSignal memory) {
        return signals[fileHash];
    }
}
