// SPDX-License-Identifier: ExploitSanctum
pragma solidity ^0.8.19;

contract ExploitChainDisruptionRouter {
    struct ExploitSignal {
        string exploitID;
        string vector;
        bool disrupted;
        string stewardNote;
    }

    mapping(string => ExploitSignal) public exploitRegistry;

    event ExploitTagged(string exploitID, string vector);
    event ExploitDisrupted(string exploitID);

    function tagExploit(string memory exploitID, string memory vector, string memory stewardNote) public {
        exploitRegistry[exploitID] = ExploitSignal(exploitID, vector, false, stewardNote);
        emit ExploitTagged(exploitID, vector);
    }

    function disruptExploit(string memory exploitID) public {
        require(bytes(exploitRegistry[exploitID].vector).length > 0, "Exploit not tagged");
        exploitRegistry[exploitID].disrupted = true;
        emit ExploitDisrupted(exploitID);
    }

    function getExploitStatus(string memory exploitID) public view returns (ExploitSignal memory) {
        return exploitRegistry[exploitID];
    }
}
