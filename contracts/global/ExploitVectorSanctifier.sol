// SPDX-License-Identifier: ExploitVectorSanctum
pragma solidity ^0.8.19;

contract ExploitVectorSanctifier {
    struct VectorSignal {
        string vectorType;
        string cveID;
        bool contained;
        string stewardNote;
    }

    mapping(string => VectorSignal) public vectorRegistry;

    event VectorTagged(string vectorType, string cveID);
    event VectorContained(string vectorType);

    function tagVector(string memory vectorType, string memory cveID, string memory stewardNote) public {
        vectorRegistry[vectorType] = VectorSignal(vectorType, cveID, false, stewardNote);
        emit VectorTagged(vectorType, cveID);
    }

    function containVector(string memory vectorType) public {
        require(bytes(vectorRegistry[vectorType].cveID).length > 0, "Vector not tagged");
        vectorRegistry[vectorType].contained = true;
        emit VectorContained(vectorType);
    }

    function getVectorStatus(string memory vectorType) public view returns (VectorSignal memory) {
        return vectorRegistry[vectorType];
    }
}
